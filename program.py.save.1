import sqlite3
import random
import twitch
import time
import socket
from __future__ import print_function
from twitchstream.outputvideo import TwitchOutputStreamRepeater
from twitchstream.chat import TwitchChatStream
import argparse
import numpy as np

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    required = parser.add_argument_group('required arguments')
    required.add_argument('-u', '--username',
                          help='twitch username',
                          required=True)
    required.add_argument('-o', '--oauth',
                          help='twitch oauth '
                               '(visit https://twitchapps.com/tmi/ '
                               'to create one for your account)',
                          required=True)
    args = parser.parse_args()

    # Launch a verbose (!) twitch stream
    with TwitchChatStream(username=args.username,
                          oauth=args.oauth,
                          verbose=True) as chatstream:
         chatstream.send_chat_message("I'm reading this!")

        # Continuously check if messages are received (every ~10s)
        # This is necessary, if not, the chat stream will close itself
        # after a couple of minutes (due to ping messages from twitch)
          while True:
            received = chatstream.twitch_receive_messages()
            if received:
                print("received:", received)
            time.sleep(1)


conn = sqlite3.connect('/home/pi/mydatabase.db')

print "Opened the database sucessfully";

#VVV The portion of the project that keeps the number of records up to date

cursor = conn.execute("SELECT COUNT(a) FROM questions");
NoOfRecords = (cursor.fetchone()); #Returns the number of records.
number = (NoOfRecords[0]); #Number is the number of records as an int.
randomRecord = str((random.randint(1, number)));
print(randomRecord);

#VVV Finds the random record and returns it

cursor = conn.execute("SELECT question, a, b FROM questions WHERE id = ?", (randomRecord))
for row in cursor: 
  DisplayQuestion = row[0];
  OptionOne = row[1];
  OptionTwo = row[2];
print(DisplayQuestion, OptionOne, OptionTwo);

timer = 10;
while timer > 0:
  time.sleep(1)
  print(timer)
  timer -=1; 

new_messages = t.twitch_recieve_messages();

while True:
    #Check for new mesasages
    new_messages = t.twitch_recieve_messages();
    if not new_messages:
        #No new messages...
        continue
    else:
        for message in new_messages:
        #Wuhu we got a message. Let's extract some details from it  
           msg = message['message'].lower()
           username = message['username'].lower()
           print(username + ": " + msg);
           if msg == "a": optionatwitch+=1;
           if msg == "b": optionbtwitch+=1 ;
 
print(optionatwitch, optionbtwitch)


print "Operation is complete";
conn.close;
